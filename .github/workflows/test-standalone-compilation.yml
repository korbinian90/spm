name: Test SPM Standalone Compilation and Testing

on:
  workflow_dispatch:  # Allows manual triggering
    inputs:
      matlab_version:
        description: 'MATLAB version to use'
        required: false
        default: 'latest'
      test_type:
        description: 'Type of test to run'
        required: false
        default: 'basic'
        type: choice
        options:
        - basic
        - specific
        - all
  push:
    branches: [ spm_standalone_testing, main ]
    paths:
      - 'spm_run_standalone_tests.m'
      - 'spm_standalone.m'
      - 'test_spm_standalone_basic.m'
      - 'test_spm_class.m'
      - 'spm_tests_class.m'
      - 'spm_make_standalone.m'
      - '.github/workflows/test-standalone-compilation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'spm_run_standalone_tests.m'
      - 'spm_standalone.m'
      - 'test_spm_standalone_basic.m'
      - 'test_spm_class.m'
      - 'spm_tests_class.m'
      - 'spm_make_standalone.m'
      - '.github/workflows/test-standalone-compilation.yml'

env:
  MLM_LICENSE_TOKEN: ${{ secrets.MATLAB_BATCH_TOKEN }}

jobs:
  compile-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup MATLAB
      uses: matlab-actions/setup-matlab@v2
      with:
        release: ${{ github.event.inputs.matlab_version || 'latest' }}
        products: MATLAB_Compiler
        cache: true
        
    - name: Check MATLAB Compiler availability
      uses: matlab-actions/run-command@v2
      with:
        command: |
          try
              ver('compiler')
              fprintf('MATLAB Compiler is available\n');
          catch ME
              fprintf('MATLAB Compiler error: %s\n', ME.message);
              error('MATLAB Compiler not available');
          end
          
    - name: Prepare SPM for compilation
      uses: matlab-actions/run-command@v2
      with:
        command: |
          % Add SPM to path
          addpath(pwd);
          addpath(fullfile(pwd, 'config'));
          
          % Verify our test runner exists
          if exist('spm_run_standalone_tests.m', 'file')
              fprintf('✓ Test runner found\n');
          else
              error('Test runner not found');
          end
          
          % Verify class-based test runner exists
          if exist('spm_tests_class.m', 'file')
              fprintf('✓ Class-based test runner found\n');
          else
              warning('Class-based test runner not found');
          end
          
          % Verify class-based test files exist
          if exist('test_spm_class.m', 'file')
              fprintf('✓ Class-based test files found\n');
          else
              warning('Class-based test files not found');
          end
          
          % Verify SPM can be initialized
          try
              spm('defaults', 'fmri');
              fprintf('✓ SPM can be initialized\n');
          catch ME
              fprintf('✗ SPM initialization failed: %s\n', ME.message);
          end
          
    - name: Test class-based tests in MATLAB environment
      uses: matlab-actions/run-command@v2
      with:
        command: |
          % Set up paths
          addpath(pwd);
          addpath(fullfile(pwd, 'config'));
          
          % Initialize SPM
          try
              spm('defaults', 'fmri');
              fprintf('✓ SPM initialized for testing\n');
          catch ME
              fprintf('⚠ SPM initialization warning: %s\n', ME.message);
          end
          
          % Test class-based test runner
          if exist('spm_tests_class.m', 'file')
              try
                  fprintf('Testing class-based test runner...\n');
                  
                  % Test discovery mode
                  fprintf('Running class-based test discovery...\n');
                  results = spm_tests_class('display', true, 'verbose', 1);
                  
                  % Report results
                  if ~isempty(results)
                      passed = sum([results.Passed]);
                      failed = sum([results.Failed]);
                      incomplete = sum([results.Incomplete]);
                      total = numel(results);
                      
                      fprintf('\n=== Class-Based Test Results ===\n');
                      fprintf('Total tests: %d\n', total);
                      fprintf('Passed: %d\n', passed);
                      fprintf('Failed: %d\n', failed);
                      fprintf('Incomplete: %d\n', incomplete);
                      
                      if failed > 0
                          fprintf('⚠ Some class-based tests failed\n');
                      else
                          fprintf('✓ All class-based tests passed\n');
                      end
                  else
                      fprintf('ℹ No class-based tests found\n');
                  end
                  
              catch ME
                  fprintf('✗ Class-based test runner failed: %s\n', ME.message);
                  % Don't fail the workflow, just warn
              end
          else
              fprintf('ℹ Class-based test runner not available\n');
          end
          
    - name: Compile SPM to standalone
      uses: matlab-actions/run-command@v2
      with:
        command: |
          % Set up paths
          addpath(pwd);
          addpath(fullfile(pwd, 'config'));
          
          % Create output directory
          standalone_dir = fullfile(pwd, 'standalone');
          if ~exist(standalone_dir, 'dir')
              mkdir(standalone_dir);
          end
          
          try
              % Use the SPM compilation script
              fprintf('Starting SPM compilation...\n');
              spm_make_standalone(standalone_dir);
              fprintf('✓ SPM compilation completed\n');
              
              % List generated files
              files = dir(standalone_dir);
              fprintf('Generated files:\n');
              for i = 1:length(files)
                  if ~files(i).isdir
                      fprintf('  %s (%d bytes)\n', files(i).name, files(i).bytes);
                  end
              end
              
          catch ME
              fprintf('✗ Compilation failed: %s\n', ME.message);
              
              % Try manual compilation as fallback
              fprintf('Attempting manual compilation...\n');
              try
                  % Manual mcc command
                  mcc('-m', '-C', '-v', ...
                      '-o', 'spm12', ...
                      '-d', standalone_dir, ...
                      '-a', pwd, ...
                      'spm_standalone.m');
                  fprintf('✓ Manual compilation completed\n');
              catch ME2
                  fprintf('✗ Manual compilation also failed: %s\n', ME2.message);
                  error('Both compilation methods failed');
              end
          end
          
    - name: Test standalone executable
      run: |
        echo "=== Testing Standalone Executable ==="
        cd standalone
        
        # List all files
        echo "Files in standalone directory:"
        ls -la
        
        # Find SPM script wrapper (preferred for GitHub Actions)
        SPM_SCRIPT=$(find . -name "run_spm*.sh" -type f | head -1)
        SPM_EXE=$(find . -name "spm*" -type f -executable ! -name "*.sh" | head -1)
        
        # Prefer script wrapper over direct executable in GitHub Actions
        if [ -n "$SPM_SCRIPT" ]; then
            echo "✓ Standalone script found: $SPM_SCRIPT"
            
            # Make executable
            chmod +x "$SPM_SCRIPT"
            
            # Find MATLAB Runtime installed by matlab-actions/setup-matlab
            echo "Searching for MATLAB Runtime..."
            MCR_ROOT=""
            
            # GitHub Actions matlab-actions/setup-matlab installs MCR here
            for path in /opt/hostedtoolcache/MATLAB/*/x64/bin/glnxa64 /opt/matlabruntime/v* /usr/local/MATLAB/MATLAB_Runtime/v*; do
                if [ -d "$path" ]; then
                    # Find the parent directory that contains the runtime
                    MCR_CANDIDATE=$(dirname $(dirname "$path"))
                    if [ -f "$MCR_CANDIDATE/bin/glnxa64/MATLAB" ] || [ -f "$MCR_CANDIDATE/runtime/glnxa64/libmwmclmcrrt.so" ]; then
                        MCR_ROOT="$MCR_CANDIDATE"
                        break
                    fi
                fi
            done
            
            if [ -n "$MCR_ROOT" ]; then
                echo "✓ MATLAB Runtime found at: $MCR_ROOT"
                
                # Test help
                echo "Testing --help:"
                "$SPM_SCRIPT" "$MCR_ROOT" --help || echo "Help command failed"
                
                # Test version
                echo "Testing --version:"
                "$SPM_SCRIPT" "$MCR_ROOT" --version || echo "Version command failed"
                
                # Test our custom test command
                echo "Testing custom test command:"
                "$SPM_SCRIPT" "$MCR_ROOT" test || echo "Test command completed (check output above)"
                
                # Test class-based test command if available
                echo "Testing class-based test command:"
                "$SPM_SCRIPT" "$MCR_ROOT" test_class || echo "Class-based test command completed (check output above)"
                
            else
                echo "⚠ MATLAB Runtime path not found, trying script without explicit path..."
                echo "Available paths:"
                find /opt -name "*matlab*" -type d 2>/dev/null | head -10
                
                # Try without explicit MCR path (script might find it automatically)
                echo "Testing --help:"
                "$SPM_SCRIPT" --help || echo "Help command failed"
                
                echo "Testing --version:"
                "$SPM_SCRIPT" --version || echo "Version command failed"
                
                echo "Testing custom test command:"
                "$SPM_SCRIPT" test || echo "Test command completed (check output above)"
                
                echo "Testing class-based test command:"
                "$SPM_SCRIPT" test_class || echo "Class-based test command completed (check output above)"
            fi
            
        elif [ -n "$SPM_EXE" ]; then
            echo "⚠ Direct executable found but may need runtime libraries: $SPM_EXE"
            echo "Attempting to run (may fail without proper MCR setup)..."
            
            chmod +x "$SPM_EXE"
            
            echo "Testing custom test command:"
            "$SPM_EXE" test || echo "Direct executable failed (expected without MCR setup)"
            
            echo "Testing class-based test command:"
            "$SPM_EXE" test_class || echo "Class-based test failed (expected without MCR setup)"
            
        else
            echo "✗ No SPM executable or script found"
            echo "Available files:"
            ls -la
            exit 1
        fi
        
    - name: Package standalone for distribution
      run: |
        echo "=== Packaging SPM Standalone for Distribution ==="
        cd standalone
        
        # Create distribution package
        echo "Creating distribution package..."
        tar -czf ../spm_standalone_linux.tar.gz *
        
        # Create installation script
        cd ..
        cat > install_spm_standalone.sh << 'EOF'
        #!/bin/bash
        # SPM Standalone Installation Script
        
        set -e
        
        echo "=== SPM Standalone Installation ==="
        
        # Default installation directory
        INSTALL_DIR="${1:-$HOME/spm_standalone}"
        
        echo "Installing SPM Standalone to: $INSTALL_DIR"
        
        # Create installation directory
        mkdir -p "$INSTALL_DIR"
        
        # Extract files
        echo "Extracting SPM Standalone..."
        tar -xzf spm_standalone_linux.tar.gz -C "$INSTALL_DIR"
        
        # Make scripts executable
        chmod +x "$INSTALL_DIR"/run_spm*.sh 2>/dev/null || true
        chmod +x "$INSTALL_DIR"/spm* 2>/dev/null || true
        
        # Create symlink for easy access
        SYMLINK_DIR="$HOME/.local/bin"
        mkdir -p "$SYMLINK_DIR"
        
        # Find the SPM script
        SPM_SCRIPT=$(find "$INSTALL_DIR" -name "run_spm*.sh" | head -1)
        if [ -n "$SPM_SCRIPT" ]; then
            ln -sf "$SPM_SCRIPT" "$SYMLINK_DIR/spm_standalone"
            echo "✓ Created symlink: $SYMLINK_DIR/spm_standalone -> $SPM_SCRIPT"
        fi
        
        echo "✓ SPM Standalone installation completed"
        echo ""
        echo "Usage:"
        echo "  $SPM_SCRIPT [MCR_ROOT] [command] [options]"
        echo "  $SYMLINK_DIR/spm_standalone [MCR_ROOT] [command] [options]"
        echo ""
        echo "Test installation:"
        echo "  $SPM_SCRIPT [MCR_ROOT] test"
        
        EOF
        
        chmod +x install_spm_standalone.sh
        
        echo "✓ Distribution package created: spm_standalone_linux.tar.gz"
        echo "✓ Installation script created: install_spm_standalone.sh"
        
    - name: Test standalone installation and deployment
      run: |
        echo "=== Testing SPM Standalone Installation ==="
        
        # Simulate fresh environment (new directory)
        mkdir -p /tmp/spm_test_install
        cd /tmp/spm_test_install
        
        # Copy distribution files
        cp /home/runner/work/spm/spm/spm_standalone_linux.tar.gz .
        cp /home/runner/work/spm/spm/install_spm_standalone.sh .
        
        echo "Files available for installation:"
        ls -la
        
        # Test installation
        echo "Running installation script..."
        ./install_spm_standalone.sh ./spm_standalone_installed
        
        echo "Installation completed. Checking installed files:"
        ls -la ./spm_standalone_installed/
        
        # Find MATLAB Runtime for testing
        echo "Searching for MATLAB Runtime..."
        MCR_ROOT=""
        for path in /opt/hostedtoolcache/MATLAB/*/x64 /opt/matlabruntime/v* /usr/local/MATLAB/MATLAB_Runtime/v*; do
            if [ -d "$path" ]; then
                MCR_CANDIDATE="$path"
                if [ -f "$MCR_CANDIDATE/bin/glnxa64/MATLAB" ] || [ -f "$MCR_CANDIDATE/runtime/glnxa64/libmwmclmcrrt.so" ]; then
                    MCR_ROOT="$MCR_CANDIDATE"
                    break
                fi
                # Also check parent directories
                MCR_PARENT=$(dirname "$path")
                if [ -f "$MCR_PARENT/bin/glnxa64/MATLAB" ] || [ -f "$MCR_PARENT/runtime/glnxa64/libmwmclmcrrt.so" ]; then
                    MCR_ROOT="$MCR_PARENT"
                    break
                fi
            fi
        done
        
        # Test the installed SPM
        SPM_SCRIPT=$(find ./spm_standalone_installed -name "run_spm*.sh" | head -1)
        
        if [ -n "$SPM_SCRIPT" ] && [ -n "$MCR_ROOT" ]; then
            echo "✓ Testing installed SPM with MCR at: $MCR_ROOT"
            
            echo "Testing SPM version:"
            "$SPM_SCRIPT" "$MCR_ROOT" --version || echo "Version test completed"
            
            echo "Testing SPM help:"
            "$SPM_SCRIPT" "$MCR_ROOT" --help || echo "Help test completed"
            
            echo "Testing SPM standalone test command:"
            "$SPM_SCRIPT" "$MCR_ROOT" test || echo "Test command completed"
            
            echo "Testing SPM class-based test command:"
            "$SPM_SCRIPT" "$MCR_ROOT" test_class || echo "Class-based test command completed"
            
        elif [ -n "$SPM_SCRIPT" ]; then
            echo "⚠ MCR not found, testing without explicit path..."
            
            echo "Testing SPM version:"
            "$SPM_SCRIPT" --version || echo "Version test completed"
            
            echo "Testing SPM help:"
            "$SPM_SCRIPT" --help || echo "Help test completed"
            
            echo "Testing SPM standalone test command:"
            "$SPM_SCRIPT" test || echo "Test command completed"
            
            echo "Testing SPM class-based test command:"
            "$SPM_SCRIPT" test_class || echo "Class-based test command completed"
            
        else
            echo "✗ SPM script not found in installation"
            ls -la ./spm_standalone_installed/
            exit 1
        fi
        
        echo "✓ SPM Standalone installation and testing completed"
        
    - name: Test symlink access
      run: |
        echo "=== Testing Symlink Access ==="
        
        # Test if symlink was created and works
        if [ -L "$HOME/.local/bin/spm_standalone" ]; then
            echo "✓ Symlink found: $HOME/.local/bin/spm_standalone"
            
            # Add to PATH for testing
            export PATH="$HOME/.local/bin:$PATH"
            
            echo "Testing symlink access:"
            which spm_standalone || echo "Symlink not in PATH"
            
            # Test with symlink (if MCR available)
            MCR_ROOT=$(find /opt/hostedtoolcache/MATLAB/*/x64 -type d | head -1)
            if [ -n "$MCR_ROOT" ]; then
                echo "Testing via symlink:"
                spm_standalone "$MCR_ROOT" --version || echo "Symlink test completed"
            fi
        else
            echo "⚠ Symlink not found (expected in some environments)"
        fi
        
    - name: Upload standalone artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: spm-standalone-distribution
        path: |
          standalone/
          spm_standalone_linux.tar.gz
          install_spm_standalone.sh
        retention-days: 7
        
    - name: Test specific SPM test (if requested)
      if: github.event.inputs.test_type == 'specific'
      run: |
        cd standalone
        SPM_EXE=$(find . -name "spm*" -type f -executable ! -name "*.sh" | head -1)
        SPM_SCRIPT=$(find . -name "run_spm*.sh" -type f | head -1)
        
        if [ -n "$SPM_EXE" ]; then
            echo "Testing specific SPM test with executable:"
            "$SPM_EXE" test test_spm || echo "Specific test failed"
        elif [ -n "$SPM_SCRIPT" ]; then
            MCR_ROOT=$(find /opt -name "MATLAB_Runtime" -type d 2>/dev/null | head -1)
            if [ -n "$MCR_ROOT" ]; then
                echo "Testing specific SPM test with script:"
                "$SPM_SCRIPT" "$MCR_ROOT" test test_spm || echo "Specific test failed"
            else
                echo "Testing specific SPM test without explicit MCR:"
                "$SPM_SCRIPT" test test_spm || echo "Specific test failed"
            fi
        fi
        
    - name: Summary
      if: always()
      run: |
        echo "=== Summary ==="
        echo "✓ Repository checked out"
        echo "✓ MATLAB setup completed"
        echo "✓ SPM compilation attempted"
        echo "✓ Standalone testing attempted"
        echo ""
        echo "Check the logs above for detailed results."
        echo "Artifacts have been uploaded for manual inspection."
